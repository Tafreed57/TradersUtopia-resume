generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id                 String             @id @default(cuid())
  userId             String             @unique
  name               String
  email              String
  imageUrl           String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  stripeCustomerId   String?
  stripeSessionId    String?
  subscriptionEnd    DateTime?
  subscriptionStart  DateTime?
  subscriptionStatus SubscriptionStatus @default(FREE)
  stripeProductId    String?
  backupCodes        String[]
  isAdmin            Boolean            @default(false)
  emailNotifications Json?              @default("{\"system\": true, \"payment\": true, \"mentions\": true, \"messages\": true, \"security\": true, \"serverUpdates\": false}")
  pushNotifications  Json?              @default("{\"system\": true, \"payment\": true, \"mentions\": true, \"messages\": true, \"security\": true, \"serverUpdates\": false}")
  pushSubscriptions  Json[]             @default([])
  channels           Channel[]
  members            Member[]
  servers            Server[]
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  read      Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([userId])
  @@index([read])
}

model Server {
  id         String    @id @default(cuid())
  name       String
  imageUrl   String?
  inviteCode String    @unique
  profileId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  channels   Channel[]
  members    Member[]
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Member {
  id                     String          @id @default(cuid())
  role                   MemberRole      @default(GUEST)
  profileId              String
  serverId               String
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
  conversationsInitiated Conversation[]  @relation("memberOne")
  conversationsReceived  Conversation[]  @relation("memberTwo")
  directMessages         DirectMessage[]
  profile                Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server                 Server          @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages               Message[]

  @@index([profileId])
  @@index([serverId])
}

model Channel {
  id        String      @id @default(cuid())
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  serverId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String   @id @default(cuid())
  content   String
  channelId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
  fileUrl   String?
  memberId  String
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id             String          @id @default(cuid())
  memberOneId    String
  memberTwoId    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  memberOne      Member          @relation("memberOne", fields: [memberOneId], references: [id], onDelete: Cascade)
  memberTwo      Member          @relation("memberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id             String       @id @default(cuid())
  content        String
  fileUrl        String?
  deleted        Boolean      @default(false)
  memberId       String
  conversationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  member         Member       @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([memberId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

enum MemberRole {
  MODERATOR
  GUEST
  ADMIN
}

enum SubscriptionStatus {
  FREE
  ACTIVE
  EXPIRED
  CANCELLED
}

enum NotificationType {
  MESSAGE
  MENTION
  SERVER_UPDATE
  FRIEND_REQUEST
  SYSTEM
  PAYMENT
  SECURITY
}

// Discord Messages Table
model DiscordMessage {
  id           Int      @id @default(autoincrement())
  msgId        String   @map("msg_id")
  channelName  String   @map("channel_name")
  content      String?
  attachments  Json?
  referenceMsg Json?    @map("reference_msg")
  imageUrl     Json?    @map("image_url")
  timestamp    DateTime?
  relayed      Int      @default(0)
  createdAt    DateTime @default(now()) @map("created_at")
  
  @@unique([msgId, channelName])
  @@index([channelName, relayed])
  @@index([timestamp])
  @@map("discord_messages")
}

// Channel Metadata Table
model ChannelMetadata {
  id              Int      @id @default(autoincrement())
  channelName     String   @unique @map("channel_name")
  channelId       String   @map("channel_id")
  lastProcessedAt DateTime? @map("last_processed_at")
  messageCount    Int      @default(0) @map("message_count")
  createdAt       DateTime @default(now()) @map("created_at")
  
  @@map("channel_metadata")
}

